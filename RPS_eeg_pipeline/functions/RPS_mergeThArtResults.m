function [cfg_artifact] = RPS_mergeThArtResults(cfg_artifact1, cfg_artifact2)
% RPS_MERGEARTIFACTRESULTS is a functions which merges two artifact
% specification structures into on common one. These function is useful,
% when e.g. for certain channels (V1, V2) another threshold value has to be
% used.
%
% Use as
%   [cfg_artifact] = RPS_mergeThArtResults(cfg_artifact1, cfg_artifact2)
%
% where the input data elements has to be a result of RPS_AUTOARTIFACT
%
% This function requires the fieldtrip toolbox.
%
% See also RPS_AUTOARTIFACT

% Copyright (C) 2019, Daniel Matthes, MPI CBS

% -------------------------------------------------------------------------
% check input - only threshold artifacts should be merged
% -------------------------------------------------------------------------
if ~isfield(cfg_artifact1.FP.part1.artfctdef, 'threshold') || ...
    ~isfield(cfg_artifact1.FP.part2.artfctdef, 'threshold')
  error('cfg_artifact1 has no threshold artifacts. Nothing to merge.');
end

if ~isfield(cfg_artifact2.FP.part1.artfctdef, 'threshold') || ...
    ~isfield(cfg_artifact2.FP.part2.artfctdef, 'threshold')
  error('cfg_artifact2 has no threshold artifacts. Nothing to merge.');
end

% test if both artifact specification structures were generated by using
% the same dataset
if size(cfg_artifact1.FP.part1.artfctdef.threshold.trl, 1) ~= ...
    size(cfg_artifact2.FP.part1.artfctdef.threshold.trl, 1)
  error(['The input structures have different trl specifications. '...
          'Merging is not possible!']);
end

% -------------------------------------------------------------------------
% merge input structures
% -------------------------------------------------------------------------
for i = 1:1:4
  switch i
    case 1
      art1 = cfg_artifact1.FP;
      art2 = cfg_artifact2.FP;
    case 2
      art1 = cfg_artifact1.PD;
      art2 = cfg_artifact2.PD;
    case 3
      art1 = cfg_artifact1.PS;
      art2 = cfg_artifact2.PS;
    case 4
      art1 = cfg_artifact1.C;
      art2 = cfg_artifact2.C;
  end
  
  art = art1;

  art.part1.artfctdef.threshold = removefields( ...
    art.part1.artfctdef.threshold, {'channel', 'range', 'artifact'});

  art.part2.artfctdef.threshold = removefields( ...
    art.part2.artfctdef.threshold, {'channel', 'range', 'artifact'}); 

  art.part1.artfctdef.threshold.channel1 = ...                              % add both channel specifications
    art1.part1.artfctdef.threshold.channel;
  art.part1.artfctdef.threshold.channel2 = ...
    art2.part1.artfctdef.threshold.channel;

  art.part2.artfctdef.threshold.channel1 = ...
    art1.part2.artfctdef.threshold.channel;
  art.part2.artfctdef.threshold.channel2 = ...
    art2.part2.artfctdef.threshold.channel;

  art.part1.artfctdef.threshold.range1 = ...                                % add both range values
    art1.part1.artfctdef.threshold.range;
  art.part1.artfctdef.threshold.range2 = ...
    art2.part1.artfctdef.threshold.range;

  art.part2.artfctdef.threshold.range1 = ...
    art1.part2.artfctdef.threshold.range;
  art.part2.artfctdef.threshold.range2 = ...
    art2.part2.artfctdef.threshold.range;

  artPart1 = [ art1.part1.artfctdef.threshold.artifact; ...                 % concatenate artifact specifications
    art2.part1.artfctdef.threshold.artifact ];

  artPart2 = [ art1.part2.artfctdef.threshold.artifact; ...
    art2.part2.artfctdef.threshold.artifact ];

  if ~isempty(artPart1)                                                     % sort values in a ascending order and remove duplicates
    [~,idx] = sort(artPart1(:,1));
    artPart1 = artPart1(idx, :);

    if size(artPart1, 1) > 1
      idx       = [true; sum(diff(artPart1),2) ~= 0];
      artPart1  = artPart1(idx,:);
    end
  end

  if ~isempty(artPart2)
    [~,idx] = sort(artPart2(:,1));
    artPart2 = artPart2(idx, :);

    if size(artPart2, 1) > 1
      idx       = [true; sum(diff(artPart2),2) ~= 0];
      artPart2  = artPart2(idx,:);
    end
  end

  art.part1.artfctdef.threshold.artifact = artPart1;
  art.part2.artfctdef.threshold.artifact = artPart2;

  art.bad1Num = size(art.part1.artfctdef.threshold.artifact, 1);            % update numbers of bad channels
  art.bad2Num = size(art.part2.artfctdef.threshold.artifact, 1);

  switch i
    case 1
      cfg_artifact.FP = art;
    case 2
      cfg_artifact.PD = art;
    case 3
      cfg_artifact.PS = art;
    case 4
      cfg_artifact.C = art;
  end

end

end
